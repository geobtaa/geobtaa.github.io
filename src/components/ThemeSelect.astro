---
const laptopIconPath =
  'M21 14h-1V7a3 3 0 0 0-3-3H7a3 3 0 0 0-3 3v7H3a1 1 0 0 0-1 1v2a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3v-2a1 1 0 0 0-1-1ZM6 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7H6V7Zm14 10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-1h16v1Z';
const downCaretPath =
  'M17 9.17a1 1 0 0 0-1.41 0L12 12.71 8.46 9.17a1 1 0 1 0-1.41 1.42l4.24 4.24a1.002 1.002 0 0 0 1.42 0L17 10.59a1.002 1.002 0 0 0 0-1.42Z';
---

<starlight-theme-select class="theme-select-icon-only">
  <label class="theme-trigger">
    <span class="sr-only">{Astro.locals.t('themeSelect.accessibleLabel')}</span>
    <select autocomplete="off">
      <option value="dark" set:html={Astro.locals.t('themeSelect.dark')} />
      <option value="light" set:html={Astro.locals.t('themeSelect.light')} />
      <option value="auto" selected set:html={Astro.locals.t('themeSelect.auto')} />
    </select>
    <svg class="label-icon theme-icon" viewBox="0 0 24 24" role="presentation" aria-hidden="true">
      <path d={laptopIconPath} />
    </svg>
    <svg class="theme-caret" viewBox="0 0 24 24" role="presentation" aria-hidden="true">
      <path d={downCaretPath} />
    </svg>
  </label>
</starlight-theme-select>

<style>
  @layer starlight.components {
    .theme-select-icon-only .theme-trigger {
      position: relative;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.35rem;
      padding: 0.25rem 0.4rem;
      min-height: 2rem;
      color: var(--theme-select-icon-color, #ffffff);
      background: transparent;
      transition: color 150ms ease, outline-color 150ms ease;
    }

    .theme-select-icon-only .theme-trigger:hover {
      color: var(--theme-select-icon-hover-color, #ffffff);
    }

    .theme-select-icon-only .theme-trigger:focus-within {
      outline: 2px solid color-mix(in srgb, #ffffff 55%, transparent);
      outline-offset: 1px;
    }

    .theme-select-icon-only select {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      cursor: pointer;
      appearance: none;
      border: 0;
      background: transparent;
      z-index: 1;
    }

    .theme-select-icon-only select option {
      color: var(--sl-color-gray-1);
      background: var(--sl-color-bg-nav);
    }

    .theme-select-icon-only .theme-caret {
      position: static;
      width: 0.85rem;
      height: 0.85rem;
      fill: currentColor;
      opacity: 0.85;
      pointer-events: none;
      z-index: 0;
    }

    .theme-select-icon-only .theme-icon {
      width: 1.5rem;
      height: 1.5rem;
      fill: currentColor;
      pointer-events: none;
      z-index: 0;
    }
  }
</style>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
	if (typeof window !== 'undefined') {
		window.StarlightThemeProvider?.updatePickers();
	}
</script>

<script>
	type Theme = 'auto' | 'dark' | 'light';
	type ThemeProvider = { updatePickers(theme?: Theme): void };

	const getThemeProvider = (): ThemeProvider | undefined => {
		if (typeof window === 'undefined') return undefined;
		return (window as typeof window & { StarlightThemeProvider?: ThemeProvider }).StarlightThemeProvider;
	};

	/** Key in `localStorage` to store color theme preference at. */
	const storageKey = 'starlight-theme';

	/** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
	const parseTheme = (theme: unknown): Theme =>
		theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto';

	/** Load the user’s preference from `localStorage`. */
	const loadTheme = (): Theme =>
		parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));

	/** Store the user’s preference in `localStorage`. */
	function storeTheme(theme: Theme): void {
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
		}
	}

	/** Get the preferred system color scheme. */
	const getPreferredColorScheme = (): Theme =>
		matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';

	/** Update select menu UI, document theme, and local storage state. */
	function onThemeChange(theme: Theme): void {
		getThemeProvider()?.updatePickers(theme);
		document.documentElement.dataset.theme = theme === 'auto' ? getPreferredColorScheme() : theme;
		storeTheme(theme);
	}

	// React to changes in system color scheme.
	matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
		if (loadTheme() === 'auto') onThemeChange('auto');
	});

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();
			const initialTheme = loadTheme();
			onThemeChange(initialTheme);
			const select = this.querySelector('select');
			if (select instanceof HTMLSelectElement) {
				select.value = initialTheme;
				select.addEventListener('change', (e) => {
					if (e.currentTarget instanceof HTMLSelectElement) {
						onThemeChange(parseTheme(e.currentTarget.value));
					}
				});
			}
		}
	}
	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>
